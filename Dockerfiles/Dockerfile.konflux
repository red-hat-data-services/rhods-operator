# Build the manager binary
################################################################################

FROM registry.redhat.io/ubi9/go-toolset:1.24@sha256:7b1828de52c3bac600a71b81996bf748776a456181a45e2b329b39702cf6486f as builder

# These built-in args are defined in the global scope, and are not automatically accessible within build stages or RUN commands.
# To expose these arguments inside the build stage, we need to redefine it without a value.
ARG TARGETOS TARGETARCH
RUN echo "GOOS=${TARGETOS} GOARCH=${TARGETARCH}"

USER root
WORKDIR /opt
# copy local manifests to build
COPY opt/manifests/ /opt/manifests/
COPY prefetched-manifests/ /opt/manifests/

WORKDIR /workspace
# Copy the Go Modules manifests
COPY go.mod go.mod
COPY go.sum go.sum
# cache deps before building and copying source so that we don't need to re-download as much
# and so that source changes don't invalidate our downloaded layer
RUN go mod download

# Copy the go source
COPY api/ api/
COPY internal/ internal/
COPY cmd/main.go cmd/main.go
COPY pkg/ pkg/

# Copy monitoring config
COPY config/monitoring/ /opt/manifests/monitoring/

# Copy ods-configs
COPY config/osd-configs/ /opt/manifests/osd-configs/

# Copy HWProfiles
COPY config/hardwareprofiles/ /opt/manifests/hardwareprofiles

# Clean up unwanted directories and files from manifests
RUN rm -rf /opt/manifests/*/e2e /opt/manifests/*/scorecard /opt/manifests/*/test /opt/manifests/*/samples /opt/manifests/*/example-* \
    && find /opt/manifests -name "README.md" -delete

# Build stripe out debug info to minimize binary size
RUN CGO_ENABLED=1 GOOS=${TARGETOS} GOARCH=${TARGETARCH} GOEXPERIMENT=strictfipsruntime go build -a -ldflags="-s -w" -o manager cmd/main.go

################################################################################
FROM registry.access.redhat.com/ubi9/ubi-minimal@sha256:34880b64c07f28f64d95737f82f891516de9a3b43583f39970f7bf8e4cfa48b7
WORKDIR /
COPY --from=builder /workspace/manager .
COPY --chown=1001:0 --from=builder /opt/manifests /opt/manifests

# tar installed to allow easy use of "oc cp" for component dev use cases.
# See hack/component-dev/README.md in the source repo for more info.
RUN microdnf install -y tar && microdnf clean all

# Recursive change all files
RUN chmod -R g=u /opt/manifests
USER 1001

ENTRYPOINT ["/manager"]

LABEL com.redhat.component="odh-operator-container" \
      description="rhoai-operator" \
      name="managed-open-data-hub/odh-rhel8-operator" \
      summary="odh-operator" \
      maintainer="['managed-open-data-hub@redhat.com']" \
      io.openshift.expose-services="" \
      io.k8s.display-name="odh-operator" \
      io.k8s.description="odh-operator" \
      com.redhat.license_terms="https://www.redhat.com/licenses/Red_Hat_Standard_EULA_20191108.pdf"
